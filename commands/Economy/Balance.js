const { EmbedBuilder, ApplicationCommandOptionType, AttachmentBuilder } = require("discord.js");
const Canvas = require("@napi-rs/canvas");
const { GlobalFonts } = require("@napi-rs/canvas");
const path = require("path");
const GProfile = require("../../settings/models/profile.js");

// ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå Gotham Rounded SSm Light
try {
    GlobalFonts.registerFromPath(path.resolve("./assests/fonts/gothamrndssm_light.otf"), "Gotham Rnd SSm");
} catch (_) {
    // ignore if not found; will fallback to platform fonts
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÅ‡∏Ñ‡∏ä‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏π‡∏á
const CARD_WIDTH = 600;
const CARD_HEIGHT = 300;
const CARD_RADIUS = 24;

const AVATAR_CACHE_MAX = 256; // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏Ñ‡∏ä‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
const AVATAR_CACHE_TTL_MS = 5 * 60 * 1000; // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
const avatarCache = new Map(); // key: url, value: { ts: number, image: Image }

const RENDER_CONCURRENCY_MAX = 4; // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
let activeRenders = 0;

const bgState = {
    customBgImage: null,              // Image ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å URL (‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
    preRenderedCustomBg: null,        // Canvas ‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ö‡∏ö custom ‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏î‡πÇ‡∏Ñ‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß
    preRenderedFallback: null         // Canvas ‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á fallback (gradient + ‡∏Ç‡∏≠‡∏á‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á)
};

// ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏û‡∏£‡∏µ‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå)
(async function preloadBackgrounds() {
    try {
        const img = await Canvas.loadImage("https://cdn.jsdelivr.net/gh/Earth-J/cdn-files@main/wallet/card_bg.png");
        bgState.customBgImage = img;
        bgState.preRenderedCustomBg = buildCustomBackgroundCanvas(img);
    } catch (_) {
        // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î custom ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ fallback ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
    }
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á fallback ‡πÄ‡∏™‡∏°‡∏≠ (‡πÄ‡∏ú‡∏∑‡πà‡∏≠ custom ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå)
    bgState.preRenderedFallback = buildFallbackBackgroundCanvas();
})();

function loadImageWithTimeout(url, timeoutMs) {
    return Promise.race([
        Canvas.loadImage(url),
        new Promise((_, reject) => setTimeout(() => reject(new Error('image-timeout')), timeoutMs))
    ]);
}

async function getAvatarImage(user) {
    const url = user.displayAvatarURL({ extension: 'png', size: 64 });
    const now = Date.now();
    const cached = avatarCache.get(url);
    if (cached && (now - cached.ts) < AVATAR_CACHE_TTL_MS) {
        return cached.image;
    }
    const image = await loadImageWithTimeout(url, 1200);
    avatarCache.set(url, { ts: now, image });
    if (avatarCache.size > AVATAR_CACHE_MAX) pruneOldestFromAvatarCache();
    return image;
}

function pruneOldestFromAvatarCache() {
    let oldestKey = null;
    let oldestTs = Infinity;
    for (const [key, value] of avatarCache.entries()) {
        if (value.ts < oldestTs) {
            oldestTs = value.ts;
            oldestKey = key;
        }
    }
    if (oldestKey) avatarCache.delete(oldestKey);
}

function buildCustomBackgroundCanvas(image) {
    const c = Canvas.createCanvas(CARD_WIDTH, CARD_HEIGHT);
    const ctx = c.getContext("2d");
    ctx.save();
    roundedRectPath(ctx, 0, 0, CARD_WIDTH, CARD_HEIGHT, CARD_RADIUS);
    ctx.clip();
    ctx.drawImage(image, 0, 0, CARD_WIDTH, CARD_HEIGHT);
    ctx.restore();
    return c;
}

function buildFallbackBackgroundCanvas() {
    const c = Canvas.createCanvas(CARD_WIDTH, CARD_HEIGHT);
    const ctx = c.getContext("2d");

    ctx.save();
    roundedRectPath(ctx, 0, 0, CARD_WIDTH, CARD_HEIGHT, CARD_RADIUS);
    ctx.clip();

    // ‡∏â‡∏≤‡∏Å‡∏´‡∏•‡∏±‡∏á gradient ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πå‡∏î
    const grad = ctx.createLinearGradient(0, 0, CARD_WIDTH, CARD_HEIGHT);
    grad.addColorStop(0, "#0b7bd4");
    grad.addColorStop(1, "#0062c8");
    ctx.fillStyle = grad;
    ctx.fillRect(0, 0, CARD_WIDTH, CARD_HEIGHT);

    // ‡∏•‡∏ß‡∏î‡∏•‡∏≤‡∏¢‡πÇ‡∏Ñ‡πâ‡∏á‡∏ó‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏ö‡∏≤‡∏á‡πÜ
    ctx.globalAlpha = 0.2;
    ctx.fillStyle = "#ffffff";
    drawArcWave(ctx, CARD_WIDTH * 0.2, -60, CARD_WIDTH * 0.9, 180);
    drawArcWave(ctx, -40, -30, CARD_WIDTH * 0.9, 120);
    ctx.globalAlpha = 1;

    // ‡∏´‡∏±‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ã‡πâ‡∏≤‡∏¢‡∏ö‡∏ô + ‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô
    ctx.fillStyle = "#ffffff";
    ctx.font = "bold 44px 'Gotham Rnd SSm'";
    ctx.fillText("wallet.", 44, 72);
    ctx.font = "500 26px 'Gotham Rnd SSm'";
    ctx.textAlign = "right";
    ctx.fillText("standard", CARD_WIDTH - 40, 64);
    ctx.textAlign = "left";

    // ‡∏ä‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πå‡∏î + ‡∏à‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤
    drawCardChip(ctx, CARD_WIDTH - 200, 110, 120, 72);
    drawDots(ctx, CARD_WIDTH - 160, CARD_HEIGHT - 36);

    ctx.restore();
    return c;
}

module.exports = {
    name: ["‡πÄ‡∏õ‡πã‡∏≤‡∏ï‡∏±‡∏á"],
    description: "‡∏î‡∏π‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÅ‡∏•‡∏∞‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
    category: "Economy",
    options: [],
    run: async (client, interaction) => {
        const user = interaction.user;
        const profile = await GProfile.findOne({ guild: interaction.guild.id, user: user.id })
            .select("money tokens bank")
            .lean();
        if (!profile) {
            return interaction.reply({ content: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`, ephemeral: true });
        }

        await interaction.deferReply({ ephemeral: false });

        // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° content ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        const displayNameText = user.username;
        const contentText = `> ** ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏ï‡∏±‡∏á‡∏Ç‡∏≠‡∏á ‚Ä¢ [** ${displayNameText} ** ]**`;

        // ‡∏´‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÉ‡∏´‡πâ fallback ‡πÄ‡∏õ‡πá‡∏ô embed ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤ latency ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
        if (activeRenders >= RENDER_CONCURRENCY_MAX) {
            const embed = new EmbedBuilder()
                .setAuthor({ name: `${user.username}`, iconURL: user.displayAvatarURL() })
                .setTitle(`‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`)
                .addFields(
                    { name: "‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤", value: `${formatNumber(profile.money || 0)} <:706219192923455549:1312400668056748032>`, inline: true },
                    { name: "‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô", value: `${formatNumber(profile.tokens || 0)} ü™ô`, inline: true },
                    { name: "‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£", value: `${formatNumber(profile.bank || 0)} üè¶`, inline: true }
                )
                .setColor(client.color)
                .setFooter({ text: `Requested By: ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() })
                .setTimestamp();
            return interaction.editReply({ content: contentText, embeds: [embed] });
        }

        activeRenders++;
        try {
            const width = CARD_WIDTH, height = CARD_HEIGHT;
            const canvas = Canvas.createCanvas(width, height);
            const ctx = canvas.getContext("2d");

            // ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏£‡∏µ‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏ß‡πâ (custom ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ, ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô fallback)
            const hasCustomBg = Boolean(bgState.preRenderedCustomBg);
            if (hasCustomBg) {
                ctx.drawImage(bgState.preRenderedCustomBg, 0, 0);
            } else {
                ctx.drawImage(bgState.preRenderedFallback, 0, 0);
            }

            // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏Ç‡∏¢‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
            const textX = hasCustomBg ? 82 : 44;
            const baseY = hasCustomBg ? 126 : 118;
            const gap = 44;

            // ‡∏Ñ‡∏•‡∏¥‡∏õ‡πÉ‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏°‡∏∏‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡∏Ç‡∏≠‡∏á PNG
            ctx.save();
            roundedRectPath(ctx, 0, 0, width, height, CARD_RADIUS);
            ctx.clip();

            // ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô 3 ‡πÅ‡∏ñ‡∏ß
            drawRow(ctx, textX, baseY, "", `${formatNumber(profile.money || 0)} Bath`, hasCustomBg);
            drawRow(ctx, textX, baseY + gap, "", `${formatNumber(profile.tokens || 0)} Tokens`, hasCustomBg);
            drawRow(ctx, textX, baseY + gap * 2, "", `${formatNumber(profile.bank || 0)} Bank`, hasCustomBg);

            // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ + ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏£‡∏á‡∏Å‡∏•‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            const displayName = user.username;
            ctx.font = "600 18px 'Gotham Rnd SSm'";
            ctx.fillStyle = "#ffffff";
            const nameY = hasCustomBg ? (baseY + gap * 3 + 8) : (baseY + gap * 3 + 0);

            try {
                const avatarImg = await getAvatarImage(user);
                const avatarSize = 32;
                const nameX = textX;
                const avatarX = nameX - avatarSize - 10;
                const avatarY = nameY - avatarSize + 6;
                ctx.save();
                ctx.beginPath();
                ctx.arc(avatarX + avatarSize / 2, avatarY + avatarSize / 2, avatarSize / 2, 0, Math.PI * 2);
                ctx.closePath();
                ctx.clip();
                ctx.drawImage(avatarImg, avatarX, avatarY, avatarSize, avatarSize);
                ctx.restore();
                setTextShadow(ctx);
                ctx.fillText(displayName, nameX, nameY);
                resetTextShadow(ctx);
            } catch {
                setTextShadow(ctx);
                ctx.fillText(displayName, textX, nameY);
                resetTextShadow(ctx);
            }

            ctx.restore();

            const png = await canvas.encode("png");
            const file = new AttachmentBuilder(png, { name: `balance.png` });
            return interaction.editReply({ content: contentText, files: [file] });
        } catch (err) {
            // fallback ‡πÄ‡∏õ‡πá‡∏ô embed ‡πÄ‡∏î‡∏¥‡∏° (‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° tag)
            const embed = new EmbedBuilder()
                .setAuthor({ name: `${user.username}`, iconURL: user.displayAvatarURL() })
                .setTitle(`‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`)
                .addFields(
                    { name: "‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤", value: `${formatNumber(profile.money || 0)} <:706219192923455549:1312400668056748032>`, inline: true },
                    { name: "‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô", value: `${formatNumber(profile.tokens || 0)} ü™ô`, inline: true },
                    { name: "‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£", value: `${formatNumber(profile.bank || 0)} üè¶`, inline: true }
                )
                .setColor(client.color)
                .setFooter({ text: `Requested By: ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() })
                .setTimestamp();
            return interaction.editReply({ content: contentText, embeds: [embed] });
        } finally {
            activeRenders = Math.max(0, activeRenders - 1);
        }
    }
};

function roundedRectPath(ctx, x, y, w, h, r) {
    ctx.beginPath();
    ctx.moveTo(x + r, y);
    ctx.arcTo(x + w, y, x + w, y + h, r);
    ctx.arcTo(x + w, y + h, x, y + h, r);
    ctx.arcTo(x, y + h, x, y, r);
    ctx.arcTo(x, y, x + w, y, r);
    ctx.closePath();
}

function drawArcWave(ctx, cx, cy, rx, ry) {
    ctx.beginPath();
    ctx.ellipse(cx, cy, rx, ry, Math.PI / 8, 0, Math.PI * 2);
    ctx.fill();
}

function drawCardChip(ctx, x, y, w, h) {
    ctx.save();
    // ‡∏ê‡∏≤‡∏ô‡∏ä‡∏¥‡∏õ
    ctx.fillStyle = "#e9e9ea";
    roundedRectPath(ctx, x, y, w, h, 12);
    ctx.fill();

    // ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
    ctx.strokeStyle = "#c5c5c7";
    ctx.lineWidth = 2;
    const rows = 4;
    for (let i = 1; i < rows; i++) {
        const yy = y + (h / rows) * i;
        ctx.beginPath();
        ctx.moveTo(x + 8, yy);
        ctx.lineTo(x + w - 8, yy);
        ctx.stroke();
    }
    // ‡∏£‡πà‡∏≠‡∏á‡∏Å‡∏•‡∏≤‡∏á
    ctx.beginPath();
    ctx.moveTo(x + w / 2, y + 8);
    ctx.lineTo(x + w / 2, y + h - 8);
    ctx.stroke();
    ctx.restore();
}

function drawDots(ctx, startX, y) {
    ctx.fillStyle = "#ffffff";
    for (let i = 0; i < 4; i++) {
        ctx.beginPath();
        ctx.arc(startX + i * 28, y, 5, 0, Math.PI * 2);
        ctx.fill();
    }
}

function setTextShadow(ctx) {
    ctx.shadowColor = "rgba(0,0,0,0.35)";
    ctx.shadowBlur = 6;
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 2;
}

function resetTextShadow(ctx) {
    ctx.shadowColor = "transparent";
    ctx.shadowBlur = 0;
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 0;
}

function drawRow(ctx, x, y, emoji, text, isBg) {
    ctx.fillStyle = "#ffffff";
    if (emoji) {
        ctx.font = "28px 'Gotham Rnd SSm'";
        setTextShadow(ctx);
        ctx.fillText(emoji, x, y);
        resetTextShadow(ctx);
    }
    ctx.font = isBg ? "500 18px 'Gotham Rnd SSm'" : "500 18px 'Gotham Rnd SSm'";
    setTextShadow(ctx);
    ctx.fillText(text, x + (emoji ? 36 : 0), y);
    resetTextShadow(ctx);
}

function formatNumber(n) {
    try {
        return n.toLocaleString("en-US");
    } catch {
        return `${n}`;
    }
} 