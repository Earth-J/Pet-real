const { EmbedBuilder, ApplicationCommandOptionType, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");
const GPet = require("../../settings/models/pet.js");
const GProfile = require("../../settings/models/profile.js");

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö (5, 10, 15, ..., 100)
const REWARD_LEVELS = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100];

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö
// - ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ 5 (5, 15, 25, ...) ‡πÑ‡∏î‡πâ 5,000 ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
// - ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ 0 (10, 20, 30, ...) ‡πÑ‡∏î‡πâ 10,000 ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç + 250 tokens
function getRewardForLevel(level) {
    const lastDigit = level % 10;
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    const money = (lastDigit === 0) ? 10000 : 5000; // ‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢ 0 ‡πÑ‡∏î‡πâ 10K, ‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢ 5 ‡πÑ‡∏î‡πâ 5K
    const tokens = (lastDigit === 0) ? 250 : 0; // ‡πÑ‡∏î‡πâ token ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ 0
    
    let description = `<:706219192923455549:1312400668056748032> ${money.toLocaleString('th-TH')} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`;
    if (tokens > 0) {
        description += ` + üé´ ${tokens} ‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô`;
    }
    
    return {
        money: money,
        tokens: tokens,
        description: description
    };
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
function createRewardEmbed(pet, currentPage, totalPages) {
    const level = REWARD_LEVELS[currentPage];
    const reward = getRewardForLevel(level);
    const isClaimed = pet.claimedRewards.includes(level);
    const canClaim = pet.level >= level && !isClaimed;
    
    let statusEmoji = "";
    let statusText = "";
    
    if (isClaimed) {
        statusEmoji = "‚úÖ";
        statusText = "‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡πâ‡∏ß";
    } else if (canClaim) {
        statusEmoji = "üéÅ";
        statusText = "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•!";
    } else {
        statusEmoji = "üîí";
        statusText = `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏ß‡∏• ${level}`;
    }
    
    const embed = new EmbedBuilder()
        .setTitle(`${statusEmoji} ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö ${level}`)
        .setDescription(`**‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•:**\n${reward.description}`)
        .addFields(
            { name: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", value: statusText, inline: true },
            { name: "‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", value: `${pet.level}`, inline: true },
            { name: "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á", value: pet.name || "Unnamed Pet", inline: true }
        )
        .setColor(isClaimed ? "#808080" : canClaim ? "#90d47b" : "#d45b5b")
        .setThumbnail("https://cdn.jsdelivr.net/gh/Earth-J/cdn-files@main/rew.png")
        .setFooter({ text: `‡∏´‡∏ô‡πâ‡∏≤ ${currentPage + 1}/${totalPages} ‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏≠‡∏∑‡πà‡∏ô` })
    
    return embed;
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö navigation ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
function createButtons(pet, currentPage, totalPages) {
    const level = REWARD_LEVELS[currentPage];
    const isClaimed = pet.claimedRewards.includes(level);
    const canClaim = pet.level >= level && !isClaimed;
    
    const row = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(`reward_prev_${currentPage}`)
                .setLabel("‚óÄ ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤")
                .setStyle(ButtonStyle.Secondary)
                .setDisabled(currentPage === 0),
            new ButtonBuilder()
                .setCustomId(`reward_claim_${level}`)
                .setLabel(isClaimed ? "‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß" : "‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•")
                .setStyle(isClaimed ? ButtonStyle.Success : canClaim ? ButtonStyle.Primary : ButtonStyle.Danger)
                .setDisabled(!canClaim || isClaimed)
                .setEmoji(isClaimed ? "‚úÖ" : canClaim ? "üéÅ" : "üîí"),
            new ButtonBuilder()
                .setCustomId(`reward_next_${currentPage}`)
                .setLabel("‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚ñ∂")
                .setStyle(ButtonStyle.Secondary)
                .setDisabled(currentPage === totalPages - 1)
        );
    
    return row;
}

module.exports = {
    name: "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á",
    description: "‡∏î‡∏π‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á",
    category: "Pet",
    options: [],
    
    run: async (client, interaction) => {
        try {
            const { user, guild } = interaction;
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const pet = await GPet.findOne({ guild: guild.id, user: user.id });
            if (!pet) {
                return interaction.reply({
                    content: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á! ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `/‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å",
                    ephemeral: true
                });
            }
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å (‡∏´‡∏ô‡πâ‡∏≤ 0)
            const currentPage = 0;
            const totalPages = REWARD_LEVELS.length;
            
            const embed = createRewardEmbed(pet, currentPage, totalPages);
            const buttons = createButtons(pet, currentPage, totalPages);
            
            const message = await interaction.reply({
                embeds: [embed],
                components: [buttons],
                ephemeral: true,
                fetchReply: true
            });
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á collector ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö interaction ‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°
            const collector = message.createMessageComponentCollector({
                filter: (i) => i.user.id === user.id,
                time: 300000 // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
            });
            
            collector.on('collect', async (i) => {
                try {
                    const [action, type, value] = i.customId.split('_');
                    
                    if (action !== 'reward') return;
                    
                    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pet ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                    const updatedPet = await GPet.findOne({ guild: guild.id, user: user.id });
                    if (!updatedPet) {
                        return i.update({
                            content: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á",
                            embeds: [],
                            components: [],
                            ephemeral: true
                        });
                    }
                    
                    if (type === 'prev') {
                        const newPage = Math.max(0, parseInt(value) - 1);
                        const newEmbed = createRewardEmbed(updatedPet, newPage, totalPages);
                        const newButtons = createButtons(updatedPet, newPage, totalPages);
                        
                        await i.update({
                            embeds: [newEmbed],
                            components: [newButtons]
                        });
                    } else if (type === 'next') {
                        const newPage = Math.min(totalPages - 1, parseInt(value) + 1);
                        const newEmbed = createRewardEmbed(updatedPet, newPage, totalPages);
                        const newButtons = createButtons(updatedPet, newPage, totalPages);
                        
                        await i.update({
                            embeds: [newEmbed],
                            components: [newButtons]
                        });
                    } else if (type === 'claim') {
                        const rewardLevel = parseInt(value);
                        
                        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                        if (updatedPet.claimedRewards.includes(rewardLevel)) {
                            return i.reply({
                                content: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!",
                                ephemeral: true
                            });
                        }
                        
                        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ñ‡∏∂‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                        if (updatedPet.level < rewardLevel) {
                            return i.reply({
                                content: `‚ùå ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö ${rewardLevel} ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤!`,
                                ephemeral: true
                            });
                        }
                        
                        // ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
                        const reward = getRewardForLevel(rewardLevel);
                        
                        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
                        let profile = await GProfile.findOne({ guild: guild.id, user: user.id });
                        if (!profile) {
                            await client.createProfile(guild.id, user.id);
                            profile = await GProfile.findOne({ guild: guild.id, user: user.id });
                        }
                        
                        profile.money = (profile.money || 0) + reward.money;
                        if (reward.tokens > 0) {
                            profile.tokens = (profile.tokens || 0) + reward.tokens;
                        }
                        await profile.save();
                        
                        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pet
                        updatedPet.claimedRewards.push(rewardLevel);
                        await updatedPet.save();
                        
                        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                        await i.reply({
                            content: `üéâ **‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö ${rewardLevel} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!**\n\n${reward.description}\n\n‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå`,
                            ephemeral: true
                        });
                        
                        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó embed ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                        const currentPageIndex = REWARD_LEVELS.indexOf(rewardLevel);
                        const newEmbed = createRewardEmbed(updatedPet, currentPageIndex, totalPages);
                        const newButtons = createButtons(updatedPet, currentPageIndex, totalPages);
                        
                        await i.message.edit({
                            embeds: [newEmbed],
                            components: [newButtons]
                        });
                    }
                } catch (err) {
                    console.error("Error handling reward button:", err);
                    if (!i.replied && !i.deferred) {
                        await i.reply({
                            content: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
                            ephemeral: true
                        });
                    }
                }
            });
            
            collector.on('end', async () => {
                try {
                    // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
                    const disabledRow = new ActionRowBuilder()
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId('disabled_prev')
                                .setLabel("‚óÄ ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤")
                                .setStyle(ButtonStyle.Secondary)
                                .setDisabled(true),
                            new ButtonBuilder()
                                .setCustomId('disabled_claim')
                                .setLabel("‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•")
                                .setStyle(ButtonStyle.Primary)
                                .setDisabled(true),
                            new ButtonBuilder()
                                .setCustomId('disabled_next')
                                .setLabel("‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚ñ∂")
                                .setStyle(ButtonStyle.Secondary)
                                .setDisabled(true)
                        );
                    
                    await message.edit({
                        components: [disabledRow]
                    }).catch(() => {});
                } catch (err) {
                    console.error("Error disabling buttons:", err);
                }
            });
            
        } catch (error) {
            console.error("Error in petrewards command:", error);
            if (!interaction.replied && !interaction.deferred) {
                await interaction.reply({
                    content: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
                    ephemeral: true
                });
            }
        }
    }
};
