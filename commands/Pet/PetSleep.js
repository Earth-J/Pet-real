const { EmbedBuilder, AttachmentBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");
const GPet = require("../../settings/models/pet.js");
const { getEmotionKey, getEmotionDescription, getEmotionEmoji } = require("../../structures/services/petEmotion");
const { getPoseKey, getPoseDescription } = require("../../structures/services/petPose");
const { getRenderQueue } = require("../../structures/services/renderQueueSingleton");
const { fetchBuffer } = require("../../structures/services/discordUpload");
const { withUserLock } = require("../../structures/services/userLock");
const { updateFireStreak } = require("../../handlers/FireStreakHandler");
const { petBehaviorSystem } = require("../../handlers/PetBehaviorSystem");
const { calculateHealth, getHealthStatus, getHealthDescription, getCareRecommendations } = require("../../structures/services/petHealthSystem");
const { petSleepSystem } = require("../../handlers/PetSleepSystem");

// Cooldown system
const trainCooldowns = new Map();
const TRAIN_COOLDOWN = 2 * 60 * 1000; // 2 minutes cooldown

const PET_ASSET_BASE_URL = (process.env.PET_ASSET_BASE_URL || 'https://cdn.kitsxkorn.xyz').replace(/\/$/, '');
const PET_ASSET_PATH_PREFIX = (process.env.PET_ASSET_PATH_PREFIX || '').replace(/^\/+|\/+$/g, '');
function buildCdnUrl(...segs) { const parts = [PET_ASSET_BASE_URL]; if (PET_ASSET_PATH_PREFIX) parts.push(PET_ASSET_PATH_PREFIX); for (const s of segs) { const v = String(s || '').trim().replace(/^\/+|\/+$/g, ''); if (v) parts.push(v);} return parts.join('/'); }
function cdnPetStaticUrl(state, type) { return buildCdnUrl('pet', state, `${type}.png`); }
async function makePetThumbAttachment(petDoc, state, poseKey) {
  try {
    const queue = getRenderQueue();
    const size = { width: 96, height: 96 };
    const dbGif = String(petDoc?.spriteGifUrl || '').trim();
    if (dbGif) {
      try {
        const buf = await fetchBuffer(dbGif);
        if (Buffer.isBuffer(buf)) return new AttachmentBuilder(buf, { name: 'pet_thumb.gif' });
      } catch (_) {}
    }
    const url = cdnPetStaticUrl(state, poseKey);
    const buf = await fetchBuffer(url);
    if (Buffer.isBuffer(buf)) return new AttachmentBuilder(buf, { name: 'pet_thumb.png' });
  } catch (_) {}
  return null;
}

module.exports = {
  name: ["‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á", "‡πÄ‡∏Ç‡πâ‡∏≤‡∏ô‡∏≠‡∏ô"],
  description: "‡∏û‡∏≤‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ô‡∏≠‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ 5-10 ‡∏ô‡∏≤‡∏ó‡∏µ)",
  category: "Pet",

  async run(client, interaction) {
    await withUserLock(interaction.guild.id, interaction.user.id, async () => {
      try {
        await interaction.deferReply();

        const pet = await GPet.findOne({ 
          guild: interaction.guild.id, 
          user: interaction.user.id 
        });

        if (!pet) {
          const embed = new EmbedBuilder()
            .setTitle('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á')
            .setDescription('‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ')
            .setColor('#ff6961');
          return interaction.editReply({ embeds: [embed] });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cooldown
        const cooldownTime = trainCooldowns.get(interaction.user.id);
        if (cooldownTime && Date.now() - cooldownTime < TRAIN_COOLDOWN) {
          const remainingTime = Math.ceil((TRAIN_COOLDOWN - (Date.now() - cooldownTime)) / 1000);
          const embed = new EmbedBuilder()
            .setTitle('‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå')
            .setDescription(`‚è∞ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏≠‡∏µ‡∏Å **${remainingTime} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ** ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏ô‡∏≠‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`)
            .setColor('#ff6961');
          return interaction.editReply({ embeds: [embed] });
        }

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≠‡∏ô
        const before = {
          affection: Number(pet.affection ?? 0),
          fullness: Number(pet.fullness ?? pet.hungry ?? 0),
          fatigue: Number(pet.fatigue ?? 0),
          dirtiness: Number(pet.dirtiness ?? (20 - Number(pet.cleanliness ?? 20)))
        };

        // Guards removed - allow all actions regardless of pet condition

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (petSleepSystem.isPetSleeping(pet._id)) {
          const remainingMinutes = petSleepSystem.getRemainingSleepTime(pet._id);
          const embed = new EmbedBuilder()
            .setTitle('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà')
            .setDescription(`üò¥ ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏≠‡∏µ‡∏Å **${remainingMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ** ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡∏ï‡∏∑‡πà‡∏ô`)
            .setColor('#ff6961');
          return interaction.editReply({ embeds: [embed] });
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô
        await this.showSleepConfirmation(interaction, pet, before);

      } catch (error) {
        console.error('Error in PetSleep:', error);
        const embed = new EmbedBuilder()
          .setTitle('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
          .setDescription('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏≠‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
          .setColor('#ff6961');
        await interaction.editReply({ embeds: [embed] });
      }
    });
  },

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô
   */
  async showSleepConfirmation(interaction, pet, beforeStats) {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
      const confirmEmbed = new EmbedBuilder()
         .setAuthor({ name: `‡πÄ‡πÄ‡∏ô‡πà‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ ${pet.name} ‡∏ô‡∏≠‡∏ô‡∏°‡∏±‡πâ‡∏¢?`, iconURL: "https://cdn.jsdelivr.net/gh/Earth-J/cdn-files@main/icon-sleep.png" })
        .setColor('#c9ce93')
        .setThumbnail("https://cdn.jsdelivr.net/gh/Earth-J/cdn-files@main/bed.png")

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô
      confirmEmbed.addFields({
        name: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô",
        value: `**‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≠‡∏ô:** 5-10 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏™‡∏∏‡πà‡∏°)\n**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ\n**‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:** ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö DM ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏∑‡πà‡∏ô`,
        inline: false
      });

      // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
      const row = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId(`sleep_confirm_${pet._id}`)
            .setLabel('‡πÉ‡∏´‡πâ‡∏ô‡∏≠‡∏ô')
            .setStyle(ButtonStyle.Secondary),
          new ButtonBuilder()
            .setCustomId(`sleep_cancel_${pet._id}`)
            .setLabel('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å')
            .setStyle(ButtonStyle.Danger)
        );

      confirmEmbed.setFooter({ 
        text: `‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏≠‡∏ô` 
      });

      await interaction.editReply({ 
        embeds: [confirmEmbed], 
        components: [row] 
      });

    } catch (error) {
      console.error('Error in showSleepConfirmation:', error);
      await interaction.editReply({ 
        content: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á" 
      });
    }
  },

  /**
   * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô
   */
  async processSleepConfirmation(interaction, petId, action) {
    try {
      if (action === 'cancel') {
        const cancelEmbed = new EmbedBuilder()
          .setTitle('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ô‡∏≠‡∏ô')
          .setDescription('‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ô‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß')
          .setColor('#ff0000')

        await interaction.update({ 
          embeds: [cancelEmbed], 
          components: [] 
        });
        return;
      }

      if (action === 'confirm') {
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô
        const sleepResult = await petSleepSystem.startSleep(petId);
        
        if (!sleepResult.success) {
          const embed = new EmbedBuilder()
            .setTitle('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ô‡∏≠‡∏ô‡πÑ‡∏î‡πâ')
            .setDescription(String(sleepResult.message || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'))
            .setColor('#ff6961');
          await interaction.update({ embeds: [embed], components: [] });
          return;
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï cooldown
        trainCooldowns.set(interaction.user.id, Date.now());

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï fire streak
        await updateFireStreak(interaction.guild.id, interaction.user.id);

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
        const updated = await GPet.findById(petId);

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EXP ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏∑‡πà‡∏ô (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
        const expAfterSleep = Number(updated.exp || 0) + 4; // Sleep ‡πÉ‡∏´‡πâ EXP +4
        let level = Number(updated.level || 1);
        let nextexp = Number(updated.nextexp || Math.floor(level * level * 1.5));
        let willLevelUp = expAfterSleep >= nextexp;

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á embed
        const embed = new EmbedBuilder()
        .setAuthor({ name: `${updated.name} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≠‡∏ô`, iconURL: "https://cdn.jsdelivr.net/gh/Earth-J/cdn-files@main/icon-sleep.png" })
        .setColor('#c9ce93')
          .setThumbnail('https://cdn.jsdelivr.net/gh/Earth-J/cdn-files@main/thumbnail/sleep.png')
          .setTimestamp();

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô
        embed.addFields({
          name: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô",
          value: `**‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≠‡∏ô:** ${sleepResult.duration} ‡∏ô‡∏≤‡∏ó‡∏µ\n**‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏∑‡πà‡∏ô:** <t:${Math.floor(sleepResult.wakeUpTime.getTime() / 1000)}:R>`,
          inline: false
        });

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏∑‡πà‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå)
        const fatigueAfterSleep = 0;
        const fatigueDelta = -Number(updated.fatigue || 0);
        embed.addFields({
          name: "‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
          value: `<:fatigue:1424394380604870727> **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏≤:** ${fatigueAfterSleep}/20 (${fatigueDelta})\n<:exp:1424394377555607592> **EXP :** ${updated.exp}/${nextexp} (+4)` + (willLevelUp ? `\n‚ú® **‡∏à‡∏∞‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏∑‡πà‡∏ô!**` : ''),
          inline: false
        });

        // Footer
        embed.setFooter({ 
          text: `‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‚Ä¢ ‡∏à‡∏∞‡∏ï‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å ${sleepResult.duration} ‡∏ô‡∏≤‡∏ó‡∏µ` 
        });

        await interaction.update({ 
          embeds: [embed], 
          components: []
        });
      }

    } catch (error) {
      console.error('Error in processSleepConfirmation:', error);
      await interaction.update({ 
        content: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        embeds: [],
        components: []
      });
    }
  }
};