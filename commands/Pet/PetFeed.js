const { EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, AttachmentBuilder, SelectMenuOptionBuilder } = require("discord.js");
const GInv = require("../../settings/models/inventory.js");
const { petSelect } = require("../../structures/select/pet.js");
const { updateFireStreak } = require("../../handlers/FireStreakHandler");
const { petBehaviorSystem } = require("../../handlers/PetBehaviorSystem");
const { getEmotionKey, getEmotionDescription, getEmotionEmoji } = require("../../structures/services/petEmotion");
const { getPoseKey, getPoseDescription } = require("../../structures/services/petPose");
const { calculateHealth, getHealthStatus, getHealthDescription, getCareRecommendations } = require("../../structures/services/petHealthSystem");
const { petSleepSystem } = require("../../handlers/PetSleepSystem");

// Cooldown system
const feedCooldowns = new Map();
const FEED_COOLDOWN = 2 * 60 * 1000; // 2 minutes cooldown

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cooldown
function checkCooldown(userId) {
    const now = Date.now();
    const lastUsed = feedCooldowns.get(userId);
    
    if (lastUsed && (now - lastUsed) < FEED_COOLDOWN) {
        const remaining = Math.ceil((FEED_COOLDOWN - (now - lastUsed)) / 1000);
        return remaining;
    }
    
    return 0;
}

module.exports = {
    name: ["‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á", "‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£"],
    description: "Feed your pet. (2 minute cooldown)",
    category: "Pet",
    run: async (client, interaction) => {
        await interaction.deferReply({ ephemeral: false });

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cooldown
        const cooldownRemaining = checkCooldown(interaction.user.id);
        if (cooldownRemaining > 0) {
            return interaction.editReply(`‚è∞ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ **${cooldownRemaining} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ** ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
        }

        const msg = await interaction.editReply("Loading please wait...");

        const inv = await GInv.findOne({ guild: interaction.guild.id, user: interaction.user.id });

        const value = Object.values(inv.item);
        const object = value.filter(x => x.type === "food");
        // if not have food return msg
        if(object.length === 0) {
            return msg.edit({ content: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤" });
        }

        const embed = new EmbedBuilder()
            .setColor(client.color)
            .setDescription("*‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£*")
    
        const select = new ActionRowBuilder()
            .addComponents([
                new StringSelectMenuBuilder()
                    .setCustomId("petselect")
                    .setPlaceholder("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á")
                    .setMaxValues(1)
                    .setMinValues(1)
                    .setOptions(object.map(key => {
                        return new SelectMenuOptionBuilder()
                            .setLabel(`${toOppositeCase(key.name)}`)
                            .setValue(key.id)
                        }
                    ))
                ])
    
        await msg.edit({ content: " ", embeds: [embed], components: [select] });
    
        let filter = (m) => m.user.id === interaction.user.id;
        let collector = await msg.createMessageComponentCollector({ filter, time: 300000 });
        const nonOwnerCollector = msg.createMessageComponentCollector({ filter: (x) => x.user.id !== interaction.user.id, time: 300000 });
        nonOwnerCollector.on('collect', async (menu) => { 
            try { 
                await menu.reply({ content: "‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral: true }); 
            } catch {} 
        });
    
        collector.on('collect', async (menu) => {
            if(menu.isStringSelectMenu()) {
                // id select menus
                if(menu.customId === "petselect") {
                    await menu.deferUpdate();
                    let [ directory ] = menu.values;
    
                    const item = inv.item.find(x => x.id === directory);
    
                    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï cooldown
                    feedCooldowns.set(interaction.user.id, Date.now());
    
                    // ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà
                    await processFeedAction(client, interaction, msg, item.id);
                    await collector.stop();
                }
            }
        });
    
        collector.on('end', async (collected, reason) => {
            if(reason === 'time') {
                const timed = new EmbedBuilder()
                    .setDescription(`‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß`)
                    .setColor(client.color)
    
                msg.edit({ embeds: [timed], components: [] });
            }
            try { nonOwnerCollector.stop(); } catch {}
        });
    }
}

function toOppositeCase(char) {
    return char.charAt(0).toUpperCase() + char.slice(1);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà
async function processFeedAction(client, interaction, msg, itemId) {
    try {
        const GPet = require("../../settings/models/pet.js");
        const pet = await GPet.findOne({ guild: interaction.guild.id, user: interaction.user.id });
        
        if (!pet) {
            return msg.edit({ content: "‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á", embeds: [], components: [] });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (petSleepSystem.isPetSleeping(pet._id)) {
            const remainingMinutes = petSleepSystem.getRemainingSleepTime(pet._id);
            return msg.edit({ 
                content: `üò¥ ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏≠‡∏µ‡∏Å **${remainingMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ** ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡∏ï‡∏∑‡πà‡∏ô`, 
                embeds: [], 
                components: [] 
            });
        }

        // ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà
        const result = await petBehaviorSystem.processPlayerAction(pet._id, 'feed');
        
        if (!result.success) {
            return msg.edit({ content: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${result.error}`, embeds: [], components: [] });
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
        const updatedPet = await GPet.findById(pet._id);
        const emotion = getEmotionKey(updatedPet);
        const pose = getPoseKey(updatedPet);
        const health = calculateHealth(updatedPet);
        const healthStatus = getHealthStatus(health);
        const careRecommendations = getCareRecommendations(updatedPet);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á embed
        const embed = new EmbedBuilder()
            .setTitle(`üçñ ‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ${pet.name}`)
            .setColor('#00ff00')
            .setThumbnail(interaction.user.avatarURL())
            .setTimestamp();

        // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á
        if (result.reactions && result.reactions.length > 0) {
            embed.addFields({
                name: "üí¨ ‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á",
                value: result.reactions.join('\n'),
                inline: false
            });
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤
        const oldStats = {
            fatigue: pet.fatigue,
            affection: pet.affection,
            fullness: pet.fullness,
            dirtiness: pet.dirtiness
        };

        const newStats = result.stats;

        let changesText = '';
        if (oldStats.fatigue !== newStats.fatigue) {
            const change = newStats.fatigue - oldStats.fatigue;
            changesText += `**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏≤:** ${oldStats.fatigue} ‚Üí ${newStats.fatigue} (${change > 0 ? '+' : ''}${change})\n`;
        }
        if (oldStats.affection !== newStats.affection) {
            const change = newStats.affection - oldStats.affection;
            changesText += `**‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏≠‡πá‡∏ô‡∏î‡∏π:** ${oldStats.affection} ‚Üí ${newStats.affection} (${change > 0 ? '+' : ''}${change})\n`;
        }
        if (oldStats.fullness !== newStats.fullness) {
            const change = newStats.fullness - oldStats.fullness;
            changesText += `**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¥‡πà‡∏°:** ${oldStats.fullness} ‚Üí ${newStats.fullness} (${change > 0 ? '+' : ''}${change})\n`;
        }
        if (oldStats.dirtiness !== newStats.dirtiness) {
            const change = newStats.dirtiness - oldStats.dirtiness;
            changesText += `**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏Å‡∏õ‡∏£‡∏Å:** ${oldStats.dirtiness} ‚Üí ${newStats.dirtiness} (${change > 0 ? '+' : ''}${change})\n`;
        }

        if (changesText) {
            embed.addFields({
                name: "üìä ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤",
                value: changesText,
                inline: false
            });
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const emotionEmoji = getEmotionEmoji(emotion);
        embed.addFields(
            {
                name: "üíñ ‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
                value: `**‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏≠‡πá‡∏ô‡∏î‡∏π:** ${newStats.affection}/20\n**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¥‡πà‡∏°:** ${newStats.fullness}/20\n**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏≤:** ${newStats.fatigue}/20\n**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏Å‡∏õ‡∏£‡∏Å:** ${newStats.dirtiness}/20`,
                inline: true
            },
            {
                name: "üé≠ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
                value: `${emotionEmoji} **‡∏≠‡∏µ‡πÇ‡∏°‡∏ï:** ${getEmotionDescription(emotion)}\nüé≠ **‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á:** ${getPoseDescription(pose)}\nüè• **‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û:** ${health}/20 (${getHealthDescription(healthStatus)})`,
                inline: true
            }
        );

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        if (careRecommendations.length > 0) {
            const urgentRecs = careRecommendations.filter(rec => rec.priority === 'urgent');
            const highRecs = careRecommendations.filter(rec => rec.priority === 'high');

            if (urgentRecs.length > 0 || highRecs.length > 0) {
                let nextStepsText = '';
                
                if (urgentRecs.length > 0) {
                    nextStepsText += 'üö® **‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏ó‡∏±‡∏ô‡∏ó‡∏µ:**\n';
                    urgentRecs.forEach(rec => {
                        nextStepsText += `${rec.emoji} ${rec.message}\n`;
                    });
                    nextStepsText += '\n';
                }

                if (highRecs.length > 0) {
                    nextStepsText += '‚ö†Ô∏è **‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ:**\n';
                    highRecs.forEach(rec => {
                        nextStepsText += `${rec.emoji} ${rec.message}\n`;
                    });
                }

                if (nextStepsText) {
                    embed.addFields({
                        name: "üìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ",
                        value: nextStepsText,
                        inline: false
                    });
                }
            }
        }

        // Footer
        embed.setFooter({ 
            text: `‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‚Ä¢ ${pet.name} ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô!` 
        });

        await msg.edit({ embeds: [embed], components: [] });

    } catch (error) {
        console.error('Error in processFeedAction:', error);
        await msg.edit({ 
            content: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", 
            embeds: [], 
            components: [] 
        });
    }
}