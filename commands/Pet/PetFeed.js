const { EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, AttachmentBuilder, StringSelectMenuOptionBuilder } = require("discord.js");
const GInv = require("../../settings/models/inventory.js");
const { petSelect } = require("../../structures/select/pet.js");
const { updateFireStreak } = require("../../handlers/FireStreakHandler");
const { petBehaviorSystem } = require("../../handlers/PetBehaviorSystem");
const { getEmotionKey, getEmotionDescription, getEmotionEmoji } = require("../../structures/services/petEmotion");
const { getPoseKey, getPoseDescription } = require("../../structures/services/petPose");
const { calculateHealth, getHealthStatus, getHealthDescription, getCareRecommendations } = require("../../structures/services/petHealthSystem");
const { petSleepSystem } = require("../../handlers/PetSleepSystem");

// Cooldown system
const feedCooldowns = new Map();
const FEED_COOLDOWN = 3 * 60 * 1000; // 3 minutes cooldown (‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å 2 ‡∏ô‡∏≤‡∏ó‡∏µ)

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cooldown
function checkCooldown(userId) {
    const now = Date.now();
    const lastUsed = feedCooldowns.get(userId);
    
    if (lastUsed && (now - lastUsed) < FEED_COOLDOWN) {
        const remaining = Math.ceil((FEED_COOLDOWN - (now - lastUsed)) / 1000);
        return remaining;
    }
    
    return 0;
}

module.exports = {
    name: ["‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á", "‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£"],
    description: "‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á (‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå 3 ‡∏ô‡∏≤‡∏ó‡∏µ)",
    category: "Pet",
    run: async (client, interaction) => {
        await interaction.deferReply({ ephemeral: false });

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cooldown
        const cooldownRemaining = checkCooldown(interaction.user.id);
        if (cooldownRemaining > 0) {
            return interaction.editReply(`‚è∞ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ **${cooldownRemaining} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ** ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
        }

        const loadingEmbed = new EmbedBuilder()
            .setTitle('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î')
            .setDescription('‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...')
            .setColor('#cccccc');
        const msg = await interaction.editReply({ embeds: [loadingEmbed] });

        const inv = await GInv.findOne({ guild: interaction.guild.id, user: interaction.user.id });

        const value = Object.values(inv.item);
        const object = value.filter(x => x.type === "food");
        // if not have food return msg
        if(object.length === 0) {
            const embedNoFood = new EmbedBuilder()
                .setTitle('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤')
                .setDescription('‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á ‡∏•‡∏≠‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô')
                .setColor('#ff6961');
            return msg.edit({ embeds: [embedNoFood] });
        }

        const embed = new EmbedBuilder()
            .setColor(client.color)
            .setDescription("*‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£*")
    
        const select = new ActionRowBuilder()
            .addComponents([
                new StringSelectMenuBuilder()
                    .setCustomId("petselect")
                    .setPlaceholder("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á")
                    .setMaxValues(1)
                    .setMinValues(1)
                    .setOptions(object.map(key => {
                        return new StringSelectMenuOptionBuilder()
                            .setLabel(`${toOppositeCase(key.name)}`)
                            .setEmoji(getFoodEmoji(key))
                            .setValue(key.id)
                        }
                    ))
                ])
    
        await msg.edit({ content: " ", embeds: [embed], components: [select] });
    
        let filter = (m) => m.user.id === interaction.user.id;
        let collector = await msg.createMessageComponentCollector({ filter, time: 300000 });
        const nonOwnerCollector = msg.createMessageComponentCollector({ filter: (x) => x.user.id !== interaction.user.id, time: 300000 });
        nonOwnerCollector.on('collect', async (menu) => { 
            try { 
                const embedOnlyOwner = new EmbedBuilder()
                    .setTitle('‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')
                    .setColor('#ff6961');
                await menu.reply({ embeds: [embedOnlyOwner], ephemeral: true }); 
            } catch {} 
        });
    
        collector.on('collect', async (menu) => {
            if(menu.isStringSelectMenu()) {
                // id select menus
                if(menu.customId === "petselect") {
                    await menu.deferUpdate();
                    let [ directory ] = menu.values;
    
                    const item = inv.item.find(x => x.id === directory);
    
                    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï cooldown
                    feedCooldowns.set(interaction.user.id, Date.now());
    
                    // ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà
                    await processFeedAction(client, interaction, msg, item.id, inv);
                    await collector.stop();
                }
            }
        });
    
        collector.on('end', async (collected, reason) => {
            if(reason === 'time') {
                const timed = new EmbedBuilder()
                    .setDescription(`‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß`)
                    .setColor(client.color)
    
                msg.edit({ embeds: [timed], components: [] });
            }
            try { nonOwnerCollector.stop(); } catch {}
        });
    }
}

function toOppositeCase(char) {
    return char.charAt(0).toUpperCase() + char.slice(1);
}

function getFoodEmoji(item) {
    if (item && (item.emoji || item.icon)) return item.emoji || item.icon;
    const name = String(item?.name || '').toLowerCase();
    if (name.includes('fish')) return 'üêü';
    if (name.includes('meat') || name.includes('steak')) return 'üçñ';
    if (name.includes('apple')) return 'üçé';
    if (name.includes('banana')) return 'üçå';
    if (name.includes('milk')) return 'ü•õ';
    if (name.includes('cookie')) return 'üç™';
    if (name.includes('cake')) return 'üç∞';
    if (name.includes('carrot')) return 'ü•ï';
    if (name.includes('rice')) return 'üçö';
    if (name.includes('bread')) return 'üçû';
    return 'üçñ';
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà
async function processFeedAction(client, interaction, msg, itemId, inv) {
    try {
        const GPet = require("../../settings/models/pet.js");
        const pet = await GPet.findOne({ guild: interaction.guild.id, user: interaction.user.id });
        
        if (!pet) {
            const embedNoPet = new EmbedBuilder()
                .setTitle('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á')
                .setDescription('‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ')
                .setColor('#ff6961');
            return msg.edit({ embeds: [embedNoPet], components: [] });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (petSleepSystem.isPetSleeping(pet._id)) {
            const remainingMinutes = petSleepSystem.getRemainingSleepTime(pet._id);
            const embedSleep = new EmbedBuilder()
                .setTitle('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà')
                .setDescription(`üò¥ ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏≠‡∏µ‡∏Å **${remainingMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ** ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡∏ï‡∏∑‡πà‡∏ô`)
                .setColor('#ff6961');
            return msg.edit({ embeds: [embedSleep], components: [] });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏•‡πâ‡∏≤
        const fatigue = Number(pet.fatigue ?? 0);
        if (fatigue >= 20) {
            const embedFat = new EmbedBuilder()
                .setTitle('‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏•‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ')
                .setDescription(`üò¥ **${pet.name} ‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏•‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ!**\n‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á \`/‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ô‡∏≠‡∏ô\``)
                .setColor('#ff6961');
            return msg.edit({ embeds: [embedFat], components: [] });
        }

        // ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏°‡∏≤‡∏Å (‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡πÑ‡∏î‡πâ)
        let fatigueWarning = '';
        if (fatigue >= 15 && fatigue < 20) {
            fatigueWarning = '\n‚ö†Ô∏è **‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:** ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏•‡πâ‡∏≤‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏≠‡∏ô‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ!';
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        const selectedFood = inv.item.find(x => x.id === itemId);
        const expBonus = selectedFood?.exp || 1; // EXP ‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (default 1 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ)
        const feedAmount = selectedFood?.feed || 0; // ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î

        // ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á EXP bonus ‡πÅ‡∏•‡∏∞ feedAmount ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
        const result = await petBehaviorSystem.processPlayerAction(pet._id, 'feed', { expBonus, feedAmount });
        
        if (!result.success) {
            const embedErr = new EmbedBuilder()
                .setTitle('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
                .setDescription(`‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${result.error || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏'}`)
                .setColor('#ff6961');
            return msg.edit({ embeds: [embedErr], components: [] });
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á embed
        const embed = new EmbedBuilder()
        .setAuthor({ name: `‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ${pet.name}`, iconURL: "https://cdn.jsdelivr.net/gh/Earth-J/cdn-files@main/icon-sleep.png" })
            .setColor('#e8f093')
            .setThumbnail('https://cdn.jsdelivr.net/gh/Earth-J/cdn-files@main/thumbnail/food.png')
            .setTimestamp();

        // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á
        if (result.reactions && result.reactions.length > 0) {
            embed.addFields({
                name: "üí¨ ‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á",
                value: result.reactions.join('\n') + fatigueWarning,
                inline: false
            });
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤ (‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Walk/Sleep/Play)
        const oldStats = {
            fatigue: pet.fatigue,
            affection: pet.affection,
            fullness: pet.fullness,
            dirtiness: pet.dirtiness
        };

        const newStats = result.stats;
        const fmt = (n) => (Number.isInteger(n) ? `${n}` : `${Number(n).toFixed(1)}`);
        const sign = (d) => (d > 0 ? `+${fmt(d)}` : `${fmt(d)}`);
        const lines = [];
        // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏Å‡∏õ‡∏£‡∏Å
        if (oldStats.dirtiness !== newStats.dirtiness) {
            const d = newStats.dirtiness - oldStats.dirtiness;
            lines.push(`<:dirtiness:1424394365677342741> **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏Å‡∏õ‡∏£‡∏Å:** ${fmt(newStats.dirtiness)}/20 (${sign(d)})`);
        }
        // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏≤
        if (oldStats.fatigue !== newStats.fatigue) {
            const d = newStats.fatigue - oldStats.fatigue;
            lines.push(`<:fatigue:1424394380604870727> **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏≤:** ${fmt(newStats.fatigue)}/20 (${sign(d)})`);
        }
        // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏≠‡πá‡∏ô‡∏î‡∏π
        if (oldStats.affection !== newStats.affection) {
            const d = newStats.affection - oldStats.affection;
            lines.push(`<:love:1424394386497601687> **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏≠‡πá‡∏ô‡∏î‡∏π:** ${fmt(newStats.affection)}/20 (${sign(d)})`);
        }
        // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¥‡πà‡∏°
        if (oldStats.fullness !== newStats.fullness) {
            const d = newStats.fullness - oldStats.fullness;
            lines.push(`<:Fullness:1424394383855452200> **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¥‡πà‡∏°:** ${fmt(newStats.fullness)}/20 (${sign(d)})`);
        }
        // EXP ‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
        lines.push(`<:exp:1424394377555607592> **EXP :** ${result.exp}/${result.nextexp} (+${fmt(result.expGain)})${result.leveledUp ? `\n**‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏õ!** ‚Üí ‡πÄ‡∏•‡πÄ‡∏ß‡∏• ${result.level} üéâ` : ''}`);

        embed.addFields({
            name: "‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
            value: lines.join('\n'),
            inline: false
        });

        // Footer
        embed.setFooter({ 
            text: `‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‚Ä¢ ${pet.name} ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô!` 
        });

        await msg.edit({ embeds: [embed], components: [] });
        if (result.leveledUp) {
            try {
                const lvlEmbed = new EmbedBuilder()
                    .setColor('#c9ce93')
                    .setTitle('üéâ Level Up!')
                    .setDescription(`${interaction.user} ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡πÄ‡∏ß‡∏• **${result.level}**!`);
                await interaction.followUp({ embeds: [lvlEmbed], ephemeral: false });
            } catch {}
        }

    } catch (error) {
        console.error('Error in processFeedAction:', error);
        const embedCatch = new EmbedBuilder()
            .setTitle('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
            .setDescription('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
            .setColor('#ff6961');
        await msg.edit({ embeds: [embedCatch], components: [] });
    }
}
