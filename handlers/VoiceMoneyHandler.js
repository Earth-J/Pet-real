const cron = require('node-cron');
const GProfile = require('../settings/models/profile');
const VoiceSession = require('../settings/models/voiceSession');
const { withUserLock } = require('../structures/services/userLock');

// ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô voice channel
const voiceUsers = new Map();

// helper: ‡πÅ‡∏õ‡∏•‡∏á userId ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
function getUserLabel(client, guildId, userId) {
    try {
        const guild = client.guilds.cache.get(guildId);
        const member = guild?.members?.cache?.get(userId);
        return member?.user?.tag || member?.displayName || userId;
    } catch (_) {
        return userId;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å voice
function initVoiceMoneySystem(client) {
    console.log('üé§ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å Voice Channel...');
    
    // ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ
    cron.schedule('* * * * *', async () => {
        try {
            const now = Date.now();
            const { GUILD_ID } = require('../settings/config');
            const targetGuildId = GUILD_ID;
            
            // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô voice channel (‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥)
            for (const [userId, userData] of voiceUsers.entries()) {
                if (userData.guildId !== targetGuildId) continue;

                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å DB ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô
                const session = await VoiceSession.findOne({ guild: userData.guildId, user: userId });
                const joinTime = session?.joinTime ? new Date(session.joinTime).getTime() : userData.joinTime;
                const timeSpent = Math.floor((now - joinTime) / 1000 / 60);

                if (timeSpent >= 1) {
                    const moneyToGive = timeSpent * 20;

                    await withUserLock(userData.guildId, userId, async () => {
                        await GProfile.findOneAndUpdate(
                            { guild: userData.guildId, user: userId },
                            { $inc: { money: moneyToGive } },
                            { upsert: true, new: true }
                        );
                        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï joinTime ‡πÉ‡∏ô DB ‡∏´‡∏•‡∏±‡∏á‡∏à‡πà‡∏≤‡∏¢
                        await VoiceSession.updateOne(
                            { guild: userData.guildId, user: userId },
                            { $set: { joinTime: new Date(now) } },
                            { upsert: true }
                        );
                    });

                    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
                    userData.joinTime = now;
                    const label = getUserLabel(client, userData.guildId, userId);
                    console.log(`üí∞ ‡πÉ‡∏´‡πâ‡πÄ‡∏á‡∏¥‡∏ô ${label} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${moneyToGive} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (${timeSpent} ‡∏ô‡∏≤‡∏ó‡∏µ)`);
                }
            }
        } catch (error) {
            console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å Voice:', error);
        }
    });
    
    console.log('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å Voice Channel ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô voice channel
async function addUserToVoice(client, guildId, userId) {
    const now = Date.now();
    voiceUsers.set(userId, { guildId, joinTime: now });
    try {
        await VoiceSession.updateOne(
            { guild: guildId, user: userId },
            { $setOnInsert: { joinTime: new Date(now) } },
            { upsert: true }
        );
    } catch (e) { console.error('VOICE_DB addUser error:', e); }
    const label = getUserLabel(client, guildId, userId);
    console.log(`üé§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${label} ‡πÄ‡∏Ç‡πâ‡∏≤ voice channel ‡πÉ‡∏ô guild ${guildId}`);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å voice channel
// reason: 'leave' | 'switch'  (switch = ‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡πâ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
async function removeUserFromVoice(client, guildId, userId, reason = 'leave') {
    const userData = voiceUsers.get(userId);
    try {
        // ‡∏≠‡πà‡∏≤‡∏ô joinTime ‡∏à‡∏≤‡∏Å DB ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏°‡πâ process ‡∏à‡∏∞‡πÄ‡∏Ñ‡∏¢‡∏î‡∏±‡∏ö
        const session = await VoiceSession.findOne({ guild: guildId, user: userId });
        const joinMs = session?.joinTime ? new Date(session.joinTime).getTime() : userData?.joinTime;
        if (joinMs) {
            const timeSpent = Math.floor((Date.now() - joinMs) / 1000 / 60);
            if (timeSpent >= 1) {
                const moneyToGive = timeSpent * 25;
                await withUserLock(guildId, userId, async () => {
                    await GProfile.findOneAndUpdate(
                        { guild: guildId, user: userId },
                        { $inc: { money: moneyToGive } },
                        { upsert: true, new: true }
                    );
                });
                const label = getUserLabel(client, guildId, userId);
                if (reason === 'leave') {
                    console.log(`üí∞ ‡∏à‡πà‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å ${label} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${moneyToGive} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (${timeSpent} ‡∏ô‡∏≤‡∏ó‡∏µ)`);
                } else {
                    console.log(`üí∞ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡πâ‡∏≠‡∏á ${label} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${moneyToGive} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (${timeSpent} ‡∏ô‡∏≤‡∏ó‡∏µ)`);
                }
            }
        }
    } catch (e) { console.error('VOICE_DB removeUser error:', e); }
    finally {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡πâ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏•‡∏ö session ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà log ‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡∏Å
        if (reason === 'leave') {
            voiceUsers.delete(userId);
            try { await VoiceSession.deleteOne({ guild: guildId, user: userId }); } catch {}
            const label = getUserLabel(client, guildId, userId);
            console.log(`üé§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${label} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å voice channel ‡πÉ‡∏ô guild ${guildId}`);
        }
    }
}

module.exports = {
    voiceUsers,
    initVoiceMoneySystem,
    addUserToVoice,
    removeUserFromVoice
};
