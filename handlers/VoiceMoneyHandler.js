const cron = require('node-cron');
const GProfile = require('../settings/models/profile');
const { withUserLock } = require('../structures/services/userLock');

// ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô voice channel
const voiceUsers = new Map();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å voice
function initVoiceMoneySystem() {
    console.log('üé§ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å Voice Channel...');
    
    // ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ
    cron.schedule('* * * * *', async () => {
        try {
            const now = Date.now();
            const targetGuildId = '1169274513901486192';
            
            // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô voice channel
            for (const [userId, userData] of voiceUsers.entries()) {
                if (userData.guildId !== targetGuildId) continue;
                
                const timeSpent = Math.floor((now - userData.joinTime) / 1000 / 60); // ‡∏ô‡∏≤‡∏ó‡∏µ
                
                if (timeSpent >= 1) {
                    // ‡πÉ‡∏´‡πâ‡πÄ‡∏á‡∏¥‡∏ô 100 ‡∏ï‡πà‡∏≠‡∏ô‡∏≤‡∏ó‡∏µ
                    const moneyToGive = timeSpent * 100;
                    
                    await withUserLock(userData.guildId, userId, async () => {
                        await GProfile.findOneAndUpdate(
                            { guild: userData.guildId, user: userId },
                            { $inc: { money: moneyToGive } },
                            { upsert: true, new: true }
                        );
                    });
                    
                    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
                    userData.joinTime = now;
                    
                    console.log(`üí∞ ‡πÉ‡∏´‡πâ‡πÄ‡∏á‡∏¥‡∏ô ${userId} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${moneyToGive} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (${timeSpent} ‡∏ô‡∏≤‡∏ó‡∏µ)`);
                }
            }
        } catch (error) {
            console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å Voice:', error);
        }
    });
    
    console.log('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å Voice Channel ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô voice channel
function addUserToVoice(guildId, userId) {
    voiceUsers.set(userId, {
        guildId,
        joinTime: Date.now()
    });
    console.log(`üé§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡πÄ‡∏Ç‡πâ‡∏≤ voice channel ‡πÉ‡∏ô guild ${guildId}`);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å voice channel
function removeUserFromVoice(guildId, userId) {
    const userData = voiceUsers.get(userId);
    if (userData && userData.guildId === guildId) {
        const timeSpent = Math.floor((Date.now() - userData.joinTime) / 1000 / 60);
        if (timeSpent >= 1) {
            const moneyToGive = timeSpent * 100;
            console.log(`üí∞ ‡πÉ‡∏´‡πâ‡πÄ‡∏á‡∏¥‡∏ô ${userId} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${moneyToGive} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (${timeSpent} ‡∏ô‡∏≤‡∏ó‡∏µ) ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å voice`);
        }
        voiceUsers.delete(userId);
        console.log(`üé§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å voice channel ‡πÉ‡∏ô guild ${guildId}`);
    }
}

module.exports = {
    voiceUsers,
    initVoiceMoneySystem,
    addUserToVoice,
    removeUserFromVoice
};