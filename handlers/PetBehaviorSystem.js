const cron = require('node-cron');
const GPet = require("../settings/models/pet.js");

/**
 * ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
 * ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å 4 ‡∏ï‡∏±‡∏ß: Fatigue, Affection, Fullness, Dirtiness
 * ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå, ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á, ‡∏≠‡∏µ‡πÇ‡∏°‡∏ï, ‡πÅ‡∏•‡∏∞‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤
 */

// ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
const STAT_RANGES = {
    MIN: 1,
    MAX: 20,
    DEFAULT: 20
};

// ‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á
const PET_MODES = {
    IDLE: 'idle',      // ‡πÄ‡∏â‡∏¢‡πÜ
    PLAY: 'play',      // ‡πÄ‡∏•‡πà‡∏ô
    SLEEP: 'sleep',    // ‡∏ô‡∏≠‡∏ô
    EAT: 'eat'         // ‡∏Å‡∏¥‡∏ô
};

// ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
const MOODS = {
    HAPPY: 'happy',
    SAD: 'sad',
    ANGRY: 'angry',
    BORED: 'bored',
    EXCITED: 'excited',
    CONTENT: 'content'
};

// ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á
const POSES = {
    IDLE: 'idle',
    SLEEP: 'sleep',
    ANGRY: 'angry',
    SEEP: 'seep',      // ‡∏ã‡∏∂‡∏°‡πÜ
    PLAYING: 'playing'
};

// ‡∏≠‡∏µ‡πÇ‡∏°‡∏ï
const EMOTES = {
    HAPPY: 'happy',
    HUNGRY: 'hungry',
    SLEEP: 'sleep',
    ANGRY: 'angry',
    SMELLY: 'smelly',
    PLAYING: 'playing',
    BORED: 'bored'
};

// ‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤ (‡∏Ñ‡∏≥‡∏û‡∏π‡∏î)
const REACTIONS = {
    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏¥‡∏ß
    HUNGRY_START: "‡∏≠‡∏¢‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡πÅ‡∏•‡πâ‡∏ß...",
    HUNGRY_VERY: "‡∏´‡∏¥‡∏ß‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢! ‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°?",
    
    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏Å‡∏õ‡∏£‡∏Å
    DIRTY_START: "‡πÄ‡∏´‡∏°‡πá‡∏ô‡∏à‡∏±‡∏á‡πÄ‡∏•‡∏¢‡∏ô‡∏∞ üò†",
    DIRTY_VERY: "‡∏ï‡∏±‡∏ß‡∏™‡∏Å‡∏õ‡∏£‡∏Å‡∏°‡∏≤‡∏Å! ‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢!",
    
    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏≤
    TIRED_START: "‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏à‡∏±‡∏á...",
    TIRED_VERY: "‡∏á‡πà‡∏ß‡∏á‡∏°‡∏≤‡∏Å! ‡∏≠‡∏¢‡∏≤‡∏Å‡∏ô‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
    
    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏≠‡πá‡∏ô‡∏î‡∏π
    AFFECTION_LOW: "‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏â‡∏±‡∏ô‡πÄ‡∏•‡∏¢...",
    AFFECTION_HIGH: "‡∏ä‡∏≠‡∏ö‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏•‡∏¢ üíñ",
    
    // ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô
    PLAY_START: "‡∏™‡∏ô‡∏∏‡∏Å‡∏à‡∏±‡∏á! ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°?",
    PLAY_END: "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢!",
    
    // ‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥
    CLEAN_LIKE: "‡∏ô‡πâ‡∏≥‡∏≠‡∏∏‡πà‡∏ô‡∏î‡∏µ! ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô",
    CLEAN_DISLIKE: "‡∏ô‡πâ‡∏≥‡πÄ‡∏¢‡πá‡∏ô‡πÑ‡∏õ‡∏´‡∏ô‡πà‡∏≠‡∏¢! ‡πÅ‡∏ï‡πà‡∏Å‡πá‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì",
    
    // ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£
    FEED_GOOD: "‡∏≠‡∏£‡πà‡∏≠‡∏¢‡∏°‡∏≤‡∏Å! ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì",
    FEED_TOO_MUCH: "‡∏≠‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ... ‡∏≠‡∏¢‡∏≤‡∏Å‡∏ô‡∏≠‡∏ô",
    
    // ‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô
    SLEEP_START: "‡∏á‡πà‡∏ß‡∏á‡πÅ‡∏•‡πâ‡∏ß... ‡πÑ‡∏õ‡∏ô‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô",
    SLEEP_END: "‡∏ï‡∏∑‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß! ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô"
};

class PetBehaviorSystem {
    constructor() {
        this.isRunning = false;
        this.tickInterval = 60000; // 1 ‡∏ô‡∏≤‡∏ó‡∏µ
        this.lastTick = Date.now();
    }

    /**
     * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á
     */
    start() {
        if (this.isRunning) {
            console.log('[PET_BEHAVIOR] System already running');
            return;
        }

        console.log('[PET_BEHAVIOR] Starting pet behavior system...');
        
        // ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡πÜ 1 ‡∏ô‡∏≤‡∏ó‡∏µ
        cron.schedule('* * * * *', async () => {
            try {
                await this.processTick();
            } catch (error) {
                console.error('[PET_BEHAVIOR] Error in tick processing:', error);
            }
        });

        this.isRunning = true;
        console.log('[PET_BEHAVIOR] Pet behavior system started');
    }

    /**
     * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏∏‡∏Å tick (1 ‡∏ô‡∏≤‡∏ó‡∏µ)
     */
    async processTick() {
        try {
            const pets = await GPet.find();
            console.log(`[PET_BEHAVIOR] Processing ${pets.length} pets...`);

            for (const pet of pets) {
                await this.updatePetBehavior(pet);
            }

            this.lastTick = Date.now();
        } catch (error) {
            console.error('[PET_BEHAVIOR] Error processing tick:', error);
        }
    }

    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
     */
    async updatePetBehavior(pet) {
        try {
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            const currentMode = this.determinePetMode(pet);
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î
            const updatedStats = this.updateStatsByMode(pet, currentMode);
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà
            const newMood = this.calculateMood(updatedStats);
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
            const health = this.calculateHealth(updatedStats);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà
            const reactions = this.checkReactions(pet, updatedStats);
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            await this.updatePetInDatabase(pet, updatedStats, newMood, health, reactions);
            
        } catch (error) {
            console.error(`[PET_BEHAVIOR] Error updating pet ${pet._id}:`, error);
        }
    }

    /**
     * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
     */
    determinePetMode(pet) {
        const fatigue = Number(pet.fatigue || 0);
        const fullness = Number(pet.fullness || 0);
        const affection = Number(pet.affection || 0);

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏°‡∏≤‡∏Å ‚Üí ‡∏ô‡∏≠‡∏ô
        if (fatigue >= 17) return PET_MODES.SLEEP;
        
        // ‡∏ñ‡πâ‡∏≤‡∏´‡∏¥‡∏ß‡∏°‡∏≤‡∏Å ‚Üí ‡∏Å‡∏¥‡∏ô
        if (fullness <= 4) return PET_MODES.EAT;
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏≠‡πá‡∏ô‡∏î‡∏π‡∏ï‡πà‡∏≥ ‚Üí ‡πÄ‡∏•‡πà‡∏ô
        if (affection <= 6) return PET_MODES.PLAY;
        
        // ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‚Üí ‡πÄ‡∏â‡∏¢‡πÜ
        return PET_MODES.IDLE;
    }

    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î
     */
    updateStatsByMode(pet, mode) {
        const stats = {
            fatigue: Number(pet.fatigue || 0),
            affection: Number(pet.affection || 0),
            fullness: Number(pet.fullness || 0),
            dirtiness: Number(pet.dirtiness || 0)
        };

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (pet.isSleeping) {
            // ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ô‡∏≠‡∏ô: ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° fatigue, ‡∏•‡∏î fullness ‡∏ä‡πâ‡∏≤, ‡πÄ‡∏û‡∏¥‡πà‡∏° dirtiness ‡∏ä‡πâ‡∏≤
            stats.fullness = Math.max(STAT_RANGES.MIN, stats.fullness - 0.1);
            stats.dirtiness = Math.min(STAT_RANGES.MAX, stats.dirtiness + 0.05);
            // fatigue ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ô‡∏≠‡∏ô
            return stats;
        }

        switch (mode) {
            case PET_MODES.IDLE:
                // ‡πÄ‡∏â‡∏¢‡πÜ: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¥‡πà‡∏°‡∏•‡∏î‡∏ä‡πâ‡∏≤, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πâ‡∏≤
                stats.fullness = Math.max(STAT_RANGES.MIN, stats.fullness - 0.5);
                stats.fatigue = Math.min(STAT_RANGES.MAX, stats.fatigue + 0.3);
                stats.dirtiness = Math.min(STAT_RANGES.MAX, stats.dirtiness + 0.2);
                break;

            case PET_MODES.PLAY:
                // ‡πÄ‡∏•‡πà‡∏ô: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏£‡πá‡∏ß, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏Å‡∏õ‡∏£‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏£‡πá‡∏ß, ‡πÅ‡∏ï‡πà affection ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
                stats.fatigue = Math.min(STAT_RANGES.MAX, stats.fatigue + 1.2);
                stats.dirtiness = Math.min(STAT_RANGES.MAX, stats.dirtiness + 0.8);
                stats.affection = Math.min(STAT_RANGES.MAX, stats.affection + 0.5);
                stats.fullness = Math.max(STAT_RANGES.MIN, stats.fullness - 0.3);
                break;

            case PET_MODES.SLEEP:
                // ‡∏ô‡∏≠‡∏ô: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏≤‡∏•‡∏î‡∏•‡∏á, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¥‡πà‡∏°‡∏•‡∏î‡∏•‡∏á‡∏ä‡πâ‡∏≤, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏Å‡∏õ‡∏£‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πâ‡∏≤
                stats.fatigue = Math.max(STAT_RANGES.MIN, stats.fatigue - 2.0);
                stats.fullness = Math.max(STAT_RANGES.MIN, stats.fullness - 0.2);
                stats.dirtiness = Math.min(STAT_RANGES.MAX, stats.dirtiness + 0.1);
                break;

            case PET_MODES.EAT:
                // ‡∏Å‡∏¥‡∏ô: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏≤‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                stats.fullness = Math.min(STAT_RANGES.MAX, stats.fullness + 1.0);
                stats.fatigue = Math.max(STAT_RANGES.MIN, stats.fatigue - 0.2);
                break;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï
        stats.fatigue = Math.max(STAT_RANGES.MIN, Math.min(STAT_RANGES.MAX, Math.round(stats.fatigue)));
        stats.affection = Math.max(STAT_RANGES.MIN, Math.min(STAT_RANGES.MAX, Math.round(stats.affection)));
        stats.fullness = Math.max(STAT_RANGES.MIN, Math.min(STAT_RANGES.MAX, Math.round(stats.fullness)));
        stats.dirtiness = Math.max(STAT_RANGES.MIN, Math.min(STAT_RANGES.MAX, Math.round(stats.dirtiness)));

        return stats;
    }

    /**
     * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å
     */
    calculateMood(stats) {
        const { fatigue, affection, fullness, dirtiness } = stats;

        // ‡∏ñ‡πâ‡∏≤‡∏´‡∏¥‡∏ß‡∏°‡∏≤‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏•‡∏∞‡πÄ‡∏•‡∏¢‡∏ô‡∏≤‡∏ô ‚Üí ‡πÄ‡∏®‡∏£‡πâ‡∏≤
        if (fullness <= 4 || affection <= 3) return MOODS.SAD;
        
        // ‡∏ñ‡πâ‡∏≤‡∏™‡∏Å‡∏õ‡∏£‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‚Üí ‡πÇ‡∏Å‡∏£‡∏ò
        if (dirtiness >= 15 || fatigue >= 16) return MOODS.ANGRY;
        
        // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏ö‡πà‡∏≠‡∏¢ ‚Üí ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç
        if (affection >= 15 && fullness >= 12 && dirtiness <= 5) return MOODS.HAPPY;
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡∏¢‡∏ô‡∏≤‡∏ô‡∏°‡∏≤‡∏Å ‚Üí ‡πÄ‡∏ö‡∏∑‡πà‡∏≠
        if (fatigue <= 3 && affection <= 8 && fullness >= 15) return MOODS.BORED;
        
        // ‡∏ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏•‡πà‡∏ô ‚Üí ‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô
        if (affection >= 10 && fatigue <= 8) return MOODS.EXCITED;
        
        // ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‚Üí ‡∏û‡∏≠‡πÉ‡∏à
        return MOODS.CONTENT;
    }

    /**
     * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
     */
    calculateHealth(stats) {
        const { fatigue, affection, fullness, dirtiness } = stats;
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û (1-20)
        const fatigueScore = (STAT_RANGES.MAX - fatigue) / STAT_RANGES.MAX;
        const affectionScore = affection / STAT_RANGES.MAX;
        const fullnessScore = fullness / STAT_RANGES.MAX;
        const cleanlinessScore = (STAT_RANGES.MAX - dirtiness) / STAT_RANGES.MAX;
        
        const healthScore = (fatigueScore + affectionScore + fullnessScore + cleanlinessScore) / 4;
        return Math.round(healthScore * STAT_RANGES.MAX);
    }

    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà
     */
    checkReactions(pet, newStats) {
        const reactions = [];
        const oldStats = {
            fatigue: Number(pet.fatigue || 0),
            affection: Number(pet.affection || 0),
            fullness: Number(pet.fullness || 0),
            dirtiness: Number(pet.dirtiness || 0)
        };

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        if (newStats.fullness <= 4 && oldStats.fullness > 4) {
            reactions.push(REACTIONS.HUNGRY_START);
        }
        if (newStats.fullness <= 2 && oldStats.fullness > 2) {
            reactions.push(REACTIONS.HUNGRY_VERY);
        }

        if (newStats.dirtiness >= 15 && oldStats.dirtiness < 15) {
            reactions.push(REACTIONS.DIRTY_START);
        }
        if (newStats.dirtiness >= 17 && oldStats.dirtiness < 17) {
            reactions.push(REACTIONS.DIRTY_VERY);
        }

        if (newStats.fatigue >= 15 && oldStats.fatigue < 15) {
            reactions.push(REACTIONS.TIRED_START);
        }
        if (newStats.fatigue >= 17 && oldStats.fatigue < 17) {
            reactions.push(REACTIONS.TIRED_VERY);
        }

        if (newStats.affection <= 3 && oldStats.affection > 3) {
            reactions.push(REACTIONS.AFFECTION_LOW);
        }
        if (newStats.affection >= 17 && oldStats.affection < 17) {
            reactions.push(REACTIONS.AFFECTION_HIGH);
        }

        return reactions;
    }

    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
     */
    async updatePetInDatabase(pet, stats, mood, health, reactions) {
        try {
            const updateData = {
                fatigue: stats.fatigue,
                affection: stats.affection,
                fullness: stats.fullness,
                dirtiness: stats.dirtiness,
                mood: mood,
                health: health,
                lastUpdate: new Date()
            };

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏è‡∏¥‡∏Å‡∏¥‡∏£‡∏¥‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if (reactions.length > 0) {
                updateData.lastReactions = reactions;
                updateData.lastReactionTime = new Date();
            }

            await GPet.updateOne(
                { _id: pet._id },
                { $set: updateData }
            );

            console.log(`[PET_BEHAVIOR] Updated pet ${pet._id}:`, {
                fatigue: stats.fatigue,
                affection: stats.affection,
                fullness: stats.fullness,
                dirtiness: stats.dirtiness,
                mood: mood,
                health: health,
                reactions: reactions.length
            });

        } catch (error) {
            console.error(`[PET_BEHAVIOR] Error updating pet ${pet._id} in database:`, error);
        }
    }

    /**
     * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
     */
    async processPlayerAction(petId, action, params = {}) {
        try {
            const pet = await GPet.findById(petId);
            if (!pet) {
                throw new Error('Pet not found');
            }

            const reactions = [];
            const stats = {
                fatigue: Number(pet.fatigue || 0),
                affection: Number(pet.affection || 0),
                fullness: Number(pet.fullness || 0),
                dirtiness: Number(pet.dirtiness || 0)
            };

            switch (action) {
                case 'feed':
                    // ‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞ affection ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                    stats.fullness = Math.min(STAT_RANGES.MAX, stats.fullness + 5);
                    stats.affection = Math.min(STAT_RANGES.MAX, stats.affection + 1);
                    
                    if (stats.fullness >= 18) {
                        reactions.push(REACTIONS.FEED_TOO_MUCH);
                    } else {
                        reactions.push(REACTIONS.FEED_GOOD);
                    }
                    break;

                case 'clean':
                    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î: ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏Å‡∏õ‡∏£‡∏Å
                    const oldDirtiness = stats.dirtiness;
                    stats.dirtiness = Math.max(STAT_RANGES.MIN, stats.dirtiness - 8);
                    
                    // ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ 20% ‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ä‡∏≠‡∏ö‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥
                    if (Math.random() < 0.2) {
                        reactions.push(REACTIONS.CLEAN_DISLIKE);
                    } else {
                        reactions.push(REACTIONS.CLEAN_LIKE);
                        stats.affection = Math.min(STAT_RANGES.MAX, stats.affection + 1);
                    }
                    break;

                case 'play':
                    // ‡πÄ‡∏•‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢: ‡πÄ‡∏û‡∏¥‡πà‡∏° affection ‡∏°‡∏≤‡∏Å ‡πÅ‡∏ï‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏Å‡∏õ‡∏£‡∏Å
                    stats.affection = Math.min(STAT_RANGES.MAX, stats.affection + 3);
                    stats.fatigue = Math.min(STAT_RANGES.MAX, stats.fatigue + 2);
                    stats.dirtiness = Math.min(STAT_RANGES.MAX, stats.dirtiness + 1);
                    stats.fullness = Math.max(STAT_RANGES.MIN, stats.fullness - 1);
                    
                    reactions.push(REACTIONS.PLAY_START);
                    break;

                case 'sleep':
                    // ‡∏ô‡∏≠‡∏ô: ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
                    stats.fatigue = Math.max(STAT_RANGES.MIN, stats.fatigue - 5);
                    stats.fullness = Math.max(STAT_RANGES.MIN, stats.fullness - 1);
                    
                    reactions.push(REACTIONS.SLEEP_START);
                    break;
            }

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
            const newMood = this.calculateMood(stats);
            const health = this.calculateHealth(stats);

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            await this.updatePetInDatabase(pet, stats, newMood, health, reactions);

            return {
                success: true,
                stats: stats,
                mood: newMood,
                health: health,
                reactions: reactions
            };

        } catch (error) {
            console.error(`[PET_BEHAVIOR] Error processing player action:`, error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö
     */
    stop() {
        if (this.isRunning) {
            this.isRunning = false;
            console.log('[PET_BEHAVIOR] Pet behavior system stopped');
        }
    }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
const petBehaviorSystem = new PetBehaviorSystem();

module.exports = {
    PetBehaviorSystem,
    petBehaviorSystem,
    STAT_RANGES,
    PET_MODES,
    MOODS,
    POSES,
    EMOTES,
    REACTIONS
};
