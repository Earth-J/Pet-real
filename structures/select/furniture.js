const { EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, AttachmentBuilder, StringSelectMenuOptionBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");
const { editFurnitureA } = require("../edit/furnitureNew.js")
const GInv = require("../../settings/models/inventory.js");
const GHome = require("../../settings/models/house.js");
const { getRenderQueue } = require("../services/renderQueueSingleton");
const { fetchBuffer } = require("../services/discordUpload");
const { buildHouseLayers } = require("../services/layout");
const { forceUnlock } = require("../edit/furnitureUnified.js");
const { getEmotionKey } = require("../services/petEmotion");
const { invToArray, filterInventory } = require("../utils/inventoryHelper");

function getFurnitureEmoji(name) {
    const n = String(name || '').toLowerCase();
    if (n.includes('sofa') || n.includes('couch')) return '<:752439451241807884:1312409263896920145>';
    if (n.includes('tv')) return 'üì∫';
    if (n.includes('fridge') || n.includes('freez')) return 'üßä';
    if (n.includes('tree') || n.includes('plant')) return 'üå≥';
    if (n.includes('trash') || n.includes('bin')) return 'üóëÔ∏è';
    if (n.includes('chest') || n.includes('box')) return 'üß∞';
    return 'ü™ë';
}

const selectFurniture = async (client, interaction, msg) => {
    if (!interaction && !interaction.channel) throw new Error('Channel is inaccessible.');

    const inv = await GInv.findOne({ guild: interaction.guild.id, user: interaction.user.id });

    const object = filterInventory(inv, x => x.type === "furniture");

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏†‡∏≤‡∏û‡∏ö‡πâ‡∏≤‡∏ô + ‡πÇ‡∏≠‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏•‡∏¢‡πå‡∏Å‡∏£‡∏¥‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    async function renderHouseSelectionImage() {
        try {
            const home = await GHome.findOne({ guild: interaction.guild.id, user: interaction.user.id }).lean();
            if (!home) return null;
            let layers = buildHouseLayers(home);
            // ‡πÅ‡∏ó‡∏£‡∏Å‡∏†‡∏≤‡∏û‡πÇ‡∏≠‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏•‡∏¢‡πå‡∏Å‡∏£‡∏¥‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            layers.push({
                type: 'static',
                url: 'https://cdn.jsdelivr.net/gh/Earth-J/cdn-files@main/select_Furnitureedit.png',
                draw: { x: 0, y: 0, w: 300, h: 300 },
            });
            const queue = getRenderQueue();
            const payload = {
                guild: interaction.guild.id,
                user: interaction.user.id,
                size: { width: 300, height: 300 },
                format: 'png',
                layers,
            };
            const { jobId } = await queue.enqueue(payload);
            const result = await queue.waitForResult(jobId);
            const buffer = await fetchBuffer(result.url);
            return buffer;
        } catch (_) {
            return null;
        }
    }

    if(object.length === 0) {
        const emptyEmbed = new EmbedBuilder()
            .setTitle('üì¶ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå')
            .setDescription('‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á')
            .setColor('#E0E0E0');
        return interaction.editReply({ content: '', embeds: [emptyEmbed], files: [], components: [] });
    }

    const pageSize = 5;
    let page = 0;
    const totalPages = Math.ceil(object.length / pageSize);

    const buildEmbed = () => {
        const start = page * pageSize;
        const slice = object.slice(start, start + pageSize);
        const lines = slice.map((key, idx) => {
            const indexLabel = start + idx + 1;
            const emoji = getFurnitureEmoji(key.name);
            return `${indexLabel}. ${emoji} ${toOppositeCase(key.name)}`;
        });
        const emb = new EmbedBuilder()
            .setAuthor({ name: `ü™ë ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå`, iconURL: `https://cdn.jsdelivr.net/gh/Earth-J/cdn-files@main/734801251501604995.webp` })
            .setDescription(`**‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå** (‡πÄ‡∏ä‡πà‡∏ô 1, 2, 3)\n\n${lines.length ? lines.join("\n") : "-"}`)
            .setFooter({ text: `üìù ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (A1, B2, C3, D4)` })
            .setColor('#BAE1FF');
        return emb;
    };

    const buildPageNavRow = () => null; // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏≥‡∏ó‡∏≤‡∏á

    const backCloseRow = null; // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö/‡∏õ‡∏¥‡∏î

    await interaction.editReply({ embeds: [buildEmbed()], components: [], files: [] });

    let filter = (m) => m.user.id === interaction.user.id;
    // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏∏‡πà‡∏° (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß)
    let collector = { stop() {}, on() {} };

    // message collector for numeric input (and warn on invalid input)
    const msgFilter = (m) => m.author && m.author.id === interaction.user.id;
    const messageCollector = interaction.channel.createMessageCollector({ filter: msgFilter, time: 300000 });

    // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ

    messageCollector.on('collect', async (m) => {
        const raw = m.content.trim();
        if (!/^\d+$/.test(raw)) {
            const warnEmbed = new EmbedBuilder()
                .setDescription('‚ö†Ô∏è **‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡πÇ‡∏à‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô** (‡πÄ‡∏ä‡πà‡∏ô 1, 2, 3)')
                .setColor('#FFDFBA');
            const warn = await m.reply({ embeds: [warnEmbed], allowedMentions: { repliedUser: false } }).catch(() => null);
            if (warn && warn.delete) { try { await warn.delete().catch(() => {}); } catch {} }
            try { await m.delete().catch(() => {}); } catch {}
            return;
        }
        const idx = parseInt(raw, 10);
        if (idx < 1 || idx > object.length) {
            const warnEmbed = new EmbedBuilder()
                .setDescription(`‚ö†Ô∏è **‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç 1-${object.length}** ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`)
                .setColor('#FFDFBA');
            const warn = await m.reply({ embeds: [warnEmbed], allowedMentions: { repliedUser: false } }).catch(() => null);
            if (warn && warn.delete) { try { await warn.delete().catch(() => {}); } catch {} }
            try { await m.delete().catch(() => {}); } catch {}
            return;
        }
        const selected = object[idx - 1];
        try {
            await m.delete().catch(() => {});
        } catch {}
        // ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        collector.stop();
        messageCollector.stop();
        // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        await new Promise(r => setTimeout(r, 25));
        // ‡πÑ‡∏õ‡∏ï‡πà‡∏≠‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÅ‡∏™‡∏î‡∏á prompt ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï)
        await editFurnitureA(client, interaction, msg, selected.name, selected.type, selected.id);
    });

    collector.on('end', async (collected, reason) => {
        if(reason === 'time') {
            const timed = new EmbedBuilder()
                .setTitle('‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤')
                .setDescription('‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
                .setColor('#FFB3BA');

            interaction.editReply({ content: '', embeds: [timed], components: [] });
        }
        // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Ñ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
        forceUnlock(interaction.user.id);
    });

    messageCollector.on('end', () => {
        // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Ñ‡πÄ‡∏°‡∏∑‡πà‡∏≠ message collector ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
        forceUnlock(interaction.user.id);
    });

   return;
}

function toOppositeCase(char) {
    return char.charAt(0).toUpperCase() + char.slice(1);
}

module.exports = { selectFurniture };