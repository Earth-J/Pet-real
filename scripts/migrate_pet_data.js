const mongoose = require('mongoose');
const GPet = require('../settings/models/pet.js');

/**
 * ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå Migration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡∏≤‡∏î‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡∏°‡πà
 */

class PetDataMigrator {
    constructor() {
        this.migrationStats = {
            total: 0,
            migrated: 0,
            errors: 0,
            skipped: 0
        };
    }

    /**
     * ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
     */
    convertPetData(oldPet) {
        const newPet = { ...oldPet };

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const hasNewFields = (
            typeof newPet.affection !== 'undefined' &&
            typeof newPet.fullness !== 'undefined' &&
            typeof newPet.dirtiness !== 'undefined' &&
            typeof newPet.fatigue !== 'undefined'
        );

        if (hasNewFields) {
            console.log(`‚è≠Ô∏è  Pet ${oldPet._id} already has new fields, skipping`);
            return null; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á
        }

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
        // ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤: health, hungry, sleep, cleanliness (‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á = ‡∏î‡∏µ)
        // ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà: affection, fullness, dirtiness, fatigue

        // affection = health (‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á = ‡∏î‡∏µ)
        if (typeof newPet.health !== 'undefined') {
            newPet.affection = Math.max(0, Math.min(20, Number(newPet.health) || 20));
        } else {
            newPet.affection = 20; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        }

        // fullness = hungry (‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á = ‡∏≠‡∏¥‡πà‡∏°)
        if (typeof newPet.hungry !== 'undefined') {
            newPet.fullness = Math.max(0, Math.min(20, Number(newPet.hungry) || 20));
        } else {
            newPet.fullness = 20; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        }

        // dirtiness = 20 - cleanliness (‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á = ‡∏™‡∏Å‡∏õ‡∏£‡∏Å)
        if (typeof newPet.cleanliness !== 'undefined') {
            newPet.dirtiness = Math.max(0, Math.min(20, 20 - (Number(newPet.cleanliness) || 20)));
        } else {
            newPet.dirtiness = 0; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏™‡∏∞‡∏≠‡∏≤‡∏î)
        }

        // fatigue = 20 - sleep (‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á = ‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢)
        if (typeof newPet.sleep !== 'undefined') {
            newPet.fatigue = Math.max(0, Math.min(20, 20 - (Number(newPet.sleep) || 20)));
        } else {
            newPet.fatigue = 0; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢)
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
        if (typeof newPet.fireStreak === 'undefined') {
            newPet.fireStreak = 0;
        }
        if (typeof newPet.lastActivityDate === 'undefined') {
            newPet.lastActivityDate = '';
        }
        if (typeof newPet.mood === 'undefined') {
            newPet.mood = 'content';
        }
        if (typeof newPet.lastEmotion === 'undefined') {
            newPet.lastEmotion = 'happy';
        }
        if (typeof newPet.lastPose === 'undefined') {
            newPet.lastPose = 'idle';
        }
        if (typeof newPet.healthStatus === 'undefined') {
            newPet.healthStatus = 'excellent';
        }
        if (typeof newPet.lastReactions === 'undefined') {
            newPet.lastReactions = [];
        }
        if (typeof newPet.lastReactionTime === 'undefined') {
            newPet.lastReactionTime = null;
        }
        if (typeof newPet.careRecommendations === 'undefined') {
            newPet.careRecommendations = [];
        }
        if (typeof newPet.lastPlayerAction === 'undefined') {
            newPet.lastPlayerAction = '';
        }
        if (typeof newPet.lastPlayerActionTime === 'undefined') {
            newPet.lastPlayerActionTime = null;
        }
        if (typeof newPet.lastUpdate === 'undefined') {
            newPet.lastUpdate = new Date();
        }
        if (typeof newPet.lastTick === 'undefined') {
            newPet.lastTick = 0;
        }
        if (typeof newPet.isSleeping === 'undefined') {
            newPet.isSleeping = false;
        }
        if (typeof newPet.sleepStartTime === 'undefined') {
            newPet.sleepStartTime = null;
        }
        if (typeof newPet.sleepDuration === 'undefined') {
            newPet.sleepDuration = 0;
        }
        if (typeof newPet.lastSleepTime === 'undefined') {
            newPet.lastSleepTime = null;
        }
        if (typeof newPet.lastWakeTime === 'undefined') {
            newPet.lastWakeTime = null;
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
        const health = this.calculateNewHealth(newPet);
        newPet.health = health;

        return newPet;
    }

    /**
     * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
     */
    calculateNewHealth(pet) {
        const affection = Number(pet.affection ?? 0);
        const fullness = Number(pet.fullness ?? 0);
        const dirtiness = Number(pet.dirtiness ?? 0);
        const fatigue = Number(pet.fatigue ?? 0);

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡πà‡∏≤ (0-1)
        const affectionScore = affection / 20;
        const fullnessScore = fullness / 20;
        const cleanlinessScore = (20 - dirtiness) / 20;
        const energyScore = (20 - fatigue) / 20;

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° (‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡πà‡∏≤)
        const healthScore = (affectionScore + fullnessScore + cleanlinessScore + energyScore) / 4;
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ 1-20
        return Math.round(healthScore * 20);
    }

    /**
     * ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£ migration
     */
    async migratePets() {
        console.log('üêæ Starting Pet Data Migration...');
        console.log('Converting old pet data (health, hungry, sleep, cleanliness) to new system (affection, fullness, dirtiness, fatigue)');
        
        try {
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            const pets = await GPet.find({});
            this.migrationStats.total = pets.length;
            
            console.log(`üìä Found ${pets.length} pets to process`);

            for (const pet of pets) {
                try {
                    const convertedPet = this.convertPetData(pet);
                    
                    if (convertedPet === null) {
                        this.migrationStats.skipped++;
                        continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á
                    }

                    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    await GPet.findByIdAndUpdate(pet._id, convertedPet, { new: true });
                    
                    this.migrationStats.migrated++;
                    console.log(`‚úÖ Migrated pet ${pet._id} for user ${pet.user} in guild ${pet.guild}`);
                    console.log(`   Old: health=${pet.health}, hungry=${pet.hungry}, sleep=${pet.sleep}, cleanliness=${pet.cleanliness}`);
                    console.log(`   New: affection=${convertedPet.affection}, fullness=${convertedPet.fullness}, dirtiness=${convertedPet.dirtiness}, fatigue=${convertedPet.fatigue}, health=${convertedPet.health}`);
                    
                } catch (error) {
                    this.migrationStats.errors++;
                    console.error(`‚ùå Error migrating pet ${pet._id}:`, error.message);
                }
            }
            
            console.log('\nüìà Migration Summary:');
            console.log(`Total pets: ${this.migrationStats.total}`);
            console.log(`Migrated: ${this.migrationStats.migrated}`);
            console.log(`Skipped: ${this.migrationStats.skipped}`);
            console.log(`Errors: ${this.migrationStats.errors}`);
            
        } catch (error) {
            console.error('‚ùå Pet migration failed:', error);
        }
    }

    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£ migration
     */
    async validateMigration() {
        console.log('\nüîç Validating migration...');
        
        try {
            const totalPets = await GPet.countDocuments();
            const petsWithNewFields = await GPet.countDocuments({
                affection: { $exists: true },
                fullness: { $exists: true },
                dirtiness: { $exists: true },
                fatigue: { $exists: true }
            });
            
            console.log(`Total pets: ${totalPets}`);
            console.log(`Pets with new fields: ${petsWithNewFields}`);
            
            if (petsWithNewFields === totalPets) {
                console.log('‚úÖ All pets have been migrated successfully!');
                return true;
            } else {
                console.log(`‚ùå ${totalPets - petsWithNewFields} pets still need migration`);
                return false;
            }
            
        } catch (error) {
            console.error('‚ùå Validation error:', error);
            return false;
        }
    }

    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
     */
    async showSampleData() {
        console.log('\nüìã Sample migrated pet data:');
        
        try {
            const samplePets = await GPet.find({
                affection: { $exists: true },
                fullness: { $exists: true },
                dirtiness: { $exists: true },
                fatigue: { $exists: true }
            }).limit(3);
            
            for (const pet of samplePets) {
                console.log(`\nPet ${pet._id}:`);
                console.log(`  User: ${pet.user}, Guild: ${pet.guild}`);
                console.log(`  Name: ${pet.name}, Type: ${pet.type}`);
                console.log(`  Affection: ${pet.affection}, Fullness: ${pet.fullness}`);
                console.log(`  Dirtiness: ${pet.dirtiness}, Fatigue: ${pet.fatigue}`);
                console.log(`  Health: ${pet.health}, Level: ${pet.level}`);
            }
            
        } catch (error) {
            console.error('‚ùå Error showing sample data:', error);
        }
    }
}

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô script
async function main() {
    try {
        // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/your-database');
        console.log('‚úÖ Connected to MongoDB');
        
        const migrator = new PetDataMigrator();
        await migrator.migratePets();
        await migrator.validateMigration();
        await migrator.showSampleData();
        
        console.log('\nüìù Migration completed!');
        console.log('Next steps:');
        console.log('1. Test pet display functionality');
        console.log('2. Monitor for any issues');
        console.log('3. Consider removing old fields after confirming everything works');
        
    } catch (error) {
        console.error('‚ùå Migration failed:', error);
    } finally {
        await mongoose.disconnect();
        console.log('üîå Disconnected from MongoDB');
    }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ script ‡∏´‡∏≤‡∏Å‡∏£‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
    main();
}

module.exports = { PetDataMigrator };

